/*
$$.license
*/

$$.source.includes.internal {{
    "$$"
}}
$$.source.includes.external {{
    <$$>
}}

namespace $$.namespace {
    
// Default Constructor
$$.class.name::$$.class.name()
:   $$.class.fields.private[[:-1]]{{
        !!.class.private.prefix$$.name(),
    }}
    $$.class.fields.private[[-1]]{{
        !!.class.private.prefix$$.name()
    }}
{}

// Copy Constructor
$$.class.name::$$.class.name(const $$.class.name& copy)
:   $$.class.fields.private[[:-1]]{{
        !!.class.private.prefix$$.name(copy.!!.class.private.prefix$$.name),
    }}
    $$.class.fields.private[[-1]]{{
        !!.class.private.prefix$$.name(copy.!!.class.private.prefix$$.name)
    }}
{}

// Move Constructor
$$.class.name::$$.class.name($$.class.name&& move)
:   $$.class.fields.private[[:-1]]{{
        !!.class.private.prefix$$.name(std::move(move.!!.class.private.prefix$$.name)),
    }}
    $$.class.fields.private[[-1]]{{
        !!.class.private.prefix$$.name(std::move(move.!!.class.private.prefix$$.name))
    }}
{}

// Copy Assignment
$$.class.name& $$.class.name::operator=(const $$.class.name& copy){
    $$.class.fields.private{{
        !!.class.private.prefix$$.name = copy.!!.class.private.prefix$$.name;
    }}
    return *this;
}

// Move Assignment
$$.class.name& $$.class.name::operator=($$.class.name&& move){
    $$.class.fields.private{{
        !!.class.private.prefix$$.name = std::move(move.!!.class.private.prefix$$.name);
    }}
    return *this;
}

//
// Getters
//
$$.class.fields.private {{
    $$.type !!.class.name::$$.name(){
        return !!.class.private.prefix$$.name
    }

}}

//
// Setters (Copy and Move)
//
$$.class.fields.private {{
    !!.class.name& !!.class.name::$$.name(const $$.type& $$.name){
        !!.class.private.prefix$$.name = $$.name;
        return *this;
    }
    !!.class.name& !!.class.name::$$.name($$.type&& $$.name){
        !!.class.private.prefix$$.name = std::move($$.name);
        return *this;
    }

}}
}
